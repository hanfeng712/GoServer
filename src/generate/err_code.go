/***********************************************************************
* @ 生成错误码枚举
* @ brief
	1、配表 csv/err_code.csv 首列为枚举名

	2、解析 generate_out/err/generate_err_code.go，得到旧的错误码枚举

	3、新错误码只允许追加在表后，保障兼容性

	4、手动删除 generate_err_code.go 才会整个重新生成

* @ author zhoumf
* @ date 2018-9-3
***********************************************************************/
package main

import (
	"common"
	"common/file"
	"common/std"
	"regexp"
	"strings"
)

type ErrEnum struct {
	Name string
	Desc string
}

func generateErrCode() {
	var errCsv []ErrEnum
	file.G_Csv_Map = map[string]interface{}{
		"err_code": &errCsv,
	}
	file.LoadOneCsv("csv/err_code.csv")

	enums, enumCnt := getOldErr() //旧枚举，追加新增入后重新生成
	for i := 0; i < len(enums); i++ {
		if enums[i].Name != errCsv[i].Name {
			panic("ErrCode had changed! New err can only add to csv int the tail")
			return
		}
	}
	haveNewEnum := false
	for i := len(enums); i < len(errCsv); i++ {
		enums = append(enums, std.KeyPair{errCsv[i].Name, enumCnt})
		haveNewEnum = true
		enumCnt++
	}
	if !haveNewEnum { //没有新的，就不改动文件了，编译更友好
		println("no new errCode, don't change err_code.h")
		return
	}

	if K_ErrOutDir != "" {
		println(K_ErrOutDir, K_ErrFileName+".go")
		file.CreateTemplate(enums, K_ErrOutDir, K_ErrFileName+".go", codeErrTemplate_Go)
	}
	if K_ErrOutDir_C != "" {
		println(K_ErrOutDir_C, K_ErrFileName+".h")
		file.CreateTemplate(enums, K_ErrOutDir_C, K_ErrFileName+".h", codeErrTemplate_C)
	}
	if K_ErrOutDir_CS != "" {
		println(K_ErrOutDir_CS, K_ErrFileName+".cs")
		file.CreateTemplate(enums, K_ErrOutDir_CS, K_ErrFileName+".cs", codeErrTemplate_CS)
	}
}
func getOldErr() (enums []std.KeyPair, enumCnt int) {
	enumCnt = 1 //从1起始，更安全
	reg := regexp.MustCompile(`^\w+`)
	file.ReadLine(K_ErrOutDir+K_ErrFileName+".go", func(line string) {
		if ok, _ := regexp.MatchString(`^\w+ uint16 =`, line); ok {
			if result := reg.FindAllString(line, -1); result != nil {
				name := result[0]
				list := strings.Split(line, " ")
				rid := common.CheckAtoiName(list[len(list)-1])
				enums, enumCnt = append(enums, std.KeyPair{name, rid}), rid+1
			}
		}
	})
	return
}

// -------------------------------------
// -- 填充模板
const (
	codeErrTemplate_Go = `// Generated by GoServer/src/generate
// Don't edit !
package err

const (
	{{range $_, $v := .}}{{$v.Name}} uint16 = {{$v.ID}}
	{{end}}
)
`
	codeErrTemplate_C = `// Generated by GoServer/src/generate
// Don't edit !
#pragma once

namespace Err
{
	enum ErrEnum : uint16 {
		{{range $_, $v := .}}{{$v.Name}} = {{$v.ID}},
		{{end}}
	};
}
`
	codeErrTemplate_CS = `// Generated by GoServer/src/generate
// Don't edit !
public enum Err : System.UInt16 {
	{{range $_, $v := .}}{{$v.Name}} = {{$v.ID}},
	{{end}}
}
`
)
